@startuml
' Интерфейсы
interface UserActions {
+authorize(username: String, password: String): boolean
+selectRoute(routeId: String, time: DateTime): boolean
+checkTicketAvailability(): boolean
+checkFunds(): boolean
}

interface TicketActions {
+reserveTicket(): boolean
+deductFunds(): boolean
+confirmPurchase(): boolean
+updateTicketAvailability(): void
+cancelReservation(): boolean
}
' Классы и операции

class User implements UserActions{
' Предусловия
+authorize(username: String, password: String): boolean
+selectRoute(routeId: String, time: DateTime): boolean
+checkTicketAvailability(): boolean
+checkFunds(): boolean
' Постусловия
+reserveTicket(): boolean
+deductFunds(): boolean
+confirmPurchase(): boolean
+updateTicketAvailability(): void
+cancelReservation(): boolean
}

' Абстрактный класс и наследование

abstract class Ticket implements TicketActions{
+routeId: String
+departureTime: DateTime
+price: Money
}

User --|> BusTicket : uses

class BusTicket extends Ticket {
+number: int
+routeId: String
+departureTime: DateTime
+price: Money
}

' Предусловия

User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()

User --> BusTicket : reserveTicket()



' Постусловия

User --> User : deductFunds()
User --> User : confirmPurchase()
User --> BusTicket : updateTicketAvailability()

User --> User : cancelReservation()

' Инварианты

User ---> User : [invariant] Funds >= BusTicket.price
BusTicket ---> BusTicket : [invariant] Price > 0
Ticket ---> Ticket : [invariant] Price > 0

@enduml